import re
import requests
import pyodbc
import webbrowser
import time
from datetime import datetime
from bs4 import BeautifulSoup
from slugify import slugify
from configparser import ConfigParser

config = ConfigParser()
config.read('config.ini')
conn_str = config['DEFAULT']['CW']
conn = pyodbc.connect(conn_str)



def insert_by_titles():
    en_titles = []
    with open('./titles.tsv', 'r', encoding='utf8') as f:
        for l in f:
            en_titles.append(l.split('\t')[2].strip())
    for title in en_titles:
        url = 'https://en.wikipedia.org/wiki/'
        insert_en_title(url+title)
        print()


def insert_en_title(titleurl, depth=1):
    r = requests.get(titleurl)
    soup = BeautifulSoup(r.content, features='html5lib')
    link_wikidata = soup.select_one('li#t-wikibase')
    if link_wikidata is None:
        print('No wikidata -', titleurl)
        return
    wikidata_id = re.search(r'\d+$', link_wikidata.find_all('a')[0]['href']).group(0)
    en_title = soup.select_one('h1#firstHeading').text
    langs = {'en': re.sub(r"\'", "''", en_title)}
    for a_tag in soup.find_all('a', class_='interlanguage-link-target', href=True):
        lang_code = re.match(r'https:\/\/([a-z\-]+)', a_tag['href'])[1]
        wiki_title = re.sub(r' – [^–]+$', '', a_tag['title'])
        wiki_title = re.sub(r"\'", "''", wiki_title)
        langs[lang_code] = wiki_title
    text_lastedit = re.search(r'on (\d{1,2} \w+ \d{4})', soup.select_one('li#footer-info-lastmod').text).group(1)
    date_lastedit = datetime.strptime(text_lastedit, '%d %B %Y').strftime('%Y-%m-%d')
    print(('Q'+wikidata_id).ljust(12, ' '), date_lastedit, len(langs), en_title, sep='\t')
    if len(langs) >= 20 and not en_title.startswith('Category:') and not en_title.startswith('Wikipedia:'):
        sql_insert_wiki(wikidata_id, langs, date_lastedit, depth)
        if depth <= 2:
            depth += 1
            sparql_get_hyperclass(wikidata_id, depth)


def sql_insert_wiki(wikidata_id, langs, date_lastedit:str, depth=1):
    cursor = conn.cursor()
    cursor.execute(f"SELECT id,lang_count,edited_enwiki FROM wiki.item WHERE id = {wikidata_id}")
    rs = cursor.fetchall()
    if len(rs) == 0:
        sqlstr = f"INSERT INTO wiki.item VALUES ({wikidata_id}, {str(len(langs))}, NULL, GETDATE(), GETDATE(), '{date_lastedit}' )"
        cursor.execute(sqlstr)
        cursor.commit()
        cursor.execute(prepare_insert_articles(wikidata_id, langs))
        cursor.commit()
        print(('Q'+wikidata_id).ljust(12, ' '),'Created')
        if depth > 1:
            with open('./sortitles.tsv', 'a', encoding='utf8') as f:
                f.write(('Q'+wikidata_id).ljust(12, ' ')+'Created\t'+'https://en.wikipedia.org/wiki/'+langs['en'].replace(' ', '_')+'\n')
    elif rs[0][1] != len(langs) or str(rs[0][2])[:7] != date_lastedit[:7]:
        cursor.execute(f"UPDATE wiki.item SET lang_count={str(len(langs))}, edited_enwiki='{date_lastedit}', updated=GETDATE() WHERE id={wikidata_id};")
        cursor.commit()
        cursor.execute(f"DELETE FROM wiki.article WHERE item = {wikidata_id};")
        cursor.commit()
        cursor.execute(prepare_insert_articles(wikidata_id, langs))
        cursor.commit()
        print(('Q'+wikidata_id).ljust(12, ' '),'Updated')


def prepare_insert_articles(wikidata_id, langs):
    values = []
    for c,t in langs.items():
        s = slugify(t, separator='', lowercase=False)
        values.append(f"( {wikidata_id}, '{c}', N'{t}', '{s}', SOUNDEX('{s}'),SOUNDEX(REVERSE('{s}')) )")
    return f"INSERT INTO wiki.article (item, language, title, title_latin, soundexo, soundexr) VALUES {', '.join(values)}"


def sparql_get_hyperclass(qid, depth=0):
    sparql = """
    SELECT * WHERE{
    {
        SELECT ?c ?cLabel ?article  {
        VALUES (?i) {(wd:Q"""+str(qid)+""" )}
        ?i wdt:P31 ?c .
            ?article schema:about ?c .
            ?article schema:inLanguage "en" .
            ?article schema:isPartOf <https://en.wikipedia.org/> .
        SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
        }
    }
    UNION
    {
        SELECT  ?s ?sLabel ?article {
        VALUES (?i) {(wd:Q"""+str(qid)+""" )}
        ?i wdt:P279 ?s .
            ?article schema:about ?s .
            ?article schema:inLanguage "en" .
            ?article schema:isPartOf <https://en.wikipedia.org/> .
        SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
        }
    }
    }"""
    headers = {'Accept':'application/json'}
    r = requests.get('https://query.wikidata.org/sparql?query='+sparql, headers=headers)
    try:
        res = r.json()
        for b in (res['results']['bindings']):
            if 'c' in b:
                if b['c']['value'].split('Q')[1] != qid:
                    instance_of = b['cLabel']['value']
                    print(f'Q{qid}', 'is', 'instance_of', instance_of, sep='\t')
                    insert_en_title(b['article']['value'], depth)
            if 's' in b:
                if b['s']['value'].split('Q')[1] != qid:
                    subclass_of = b['sLabel']['value']
                    print(f'Q{qid}', 'is', 'subclass_of', subclass_of, sep='\t')
                    insert_en_title(b['article']['value'], depth)
        print(depth)
    except Exception as e:
        print(qid , e)
        # sparql_get_hyperclass(qid, depth)


def batch_sparql(hypernym, hid, instance_of=True, n_subclass=None):
    sparql = """
    SELECT DISTINCT ?item ?linkCount
    WHERE {
    VALUES ?hypernym {wd:Q"""+str(hid)+"""} 
    ?item """ \
    +(('wdt:P31?/' if instance_of else '') \
    +('wdt:P279*' if n_subclass is None else ('wdt:P279?/'*n_subclass))).rstrip('/') \
    +""" ?hypernym;
     wikibase:sitelinks ?linkCount.
    FILTER (?linkCount >= 20)
    }"""
    # ?article schema:about ?item .
    # ?article schema:inLanguage "en" .
    # ?article schema:isPartOf <https://en.wikipedia.org/> .
    # SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
    items_all = []
    headers = {'Accept':'application/json'}
    r = requests.get('https://query.wikidata.org/sparql?query='+sparql, headers=headers)
    res = r.json(strict=False)
    for b in res['results']['bindings']:
        item = b['item']['value'].split('Q')[1]
        items_all.append(item)
    for i in range(0,100000,5000):
        items = items_all[i:i+5000]
        if len(items) == 0:
            break
        sqlstr = f"UPDATE wiki.item SET hypernym = {hypernym} WHERE id IN ({','.join(items)[:-1]})"
        cursor = conn.cursor()
        cursor.execute(sqlstr)
        cursor.commit()
        sqlstr = f"SELECT id FROM wiki.item WHERE id IN ({','.join([str(i) for i in items])[:-1]})"
        cursor.execute(sqlstr)
        rs = [r[0] for r in cursor.fetchall()]
        with open('./sortitems.tsv', 'a', encoding='utf8') as f:
            for b in res['results']['bindings']:
                item = int(b['item']['value'].split('Q')[1])
                if item not in rs:
                    f.write(f"{hypernym}\t{hid}\t{item}\t{b['linkCount']['value']}\n") #{b['article']['value'].replace(' ','_')}
            f.write('\n')
        print(f'{len(rs)} of {len(items)} items hypernym updated as {hypernym} ({hid})')
    return len(rs)

def build_hypernym_grid(hypernym=None):
    hypernyms = {
        'Concept': [(151885,),(151885,True,3),813912,3505845],
        'Something (concept)': [(35120,False,5),(35120,True,2),(28813620,False,5),(28813620,True,1),(16887380,False,4),(16887380,True,2)],
        'Object (philosophy)': [(488383,False,5),(488383,True,2),(7184903,False,6),(7184903,True,2)],
        'Action (philosophy)': [(4026292,),(4026292,True,3),124490,1174599,23009459],
        'Change (philosophy)': [(1150070,),(1150070,True,4),748250],
        'Property (philosophy)': [(937228,),(937228,True,2),2151613],
        'Physical object': [(223557,False,5),(223557,True,1),(1310239,False,6),(1310239,True,2),(98119401,),23497981],
        'Structure': [(6671777,False,4),(6671777,True,2)],
        'Hypothesis': [(41719,),(41719,True,6),18706315],
        'Phenomenon': [(483247,),(483247,True,4),(16722960,),(16722960,True,5),602884],
        'Information': [(11028,),(11028,True,1),(628523,True,5),(1151067,True,5),7748,853614,6667497],
        'System': [(58778,),(58778,True,3),(811979,)],
        'Behavior': [(9332,),(9332,True,4),(1299714,),(1299714,True,6),(11024,True,3)],
        'Knowledge': [9081],
        'Terminology': [1725664,1969448],
        'Interaction': [52948,381072],
        'Technology ': [11016,2695280],
        'Astronomical object': [(6999,),(6999,True,0),17444909,9262,3235978,27521],
        'Document': [(49848,),(49848,True,3),(47461344,),(47461344,True,1),740464,2751586],
        'Organism': [(7239,),(7239,True,2),(16334298,),(16334298,True,2),729,756,39833,55983715],
        'Location': [(2221906,),(2221906,True,0),(27096213,),(27096213,True,1),(271669,True,0),1620908,52551684,123705,20719696],
        'Mathematics': [395,(24034552,),(246672,),(246672,True,3),1140046,11593,47279819,203066],
        'Chemical substance': [(79529,False,4),(43460564,True,3),19549,47154513,56256178,17339814],
        'Sign': [3695082,2001982,9788],
        'Humanities': [80083,11042,853725,210272,780687,7406919,14897293],
        'Organization': [(43229,),(43229,True,1),33104069,17197366],
        'Goods': [(28877,),(28877,True,2)],
        'Matter': [35758,177013],
        'Physical property': [4373292,3523867,107715],
        'Anatomy': [514,66394244,4936952],
        'Language': [315,34770,4536530,17376908],
        'Phrase': [187931,82042,43249,1759988],
        'Axiom': [17736],
        'Theorem': [65943],
        'Theory': [17737],
        'Ideology': [7257],
        'Art': [735,6647660,7832362],
        'Genre': [483394,8253],
        'Myth': [12827256,9134,24334685,21070568],
        'Religion': [9174,4392985,23847174,4504549,2110808,1845,1530022],
        'Tool': [39546,1183543,31807746],
        'Infrastructure': [121359],
        'Machine': [11019,839546],
        'Computer science': [21198,66747126,7397,173212,28643],
        'Time': [11471],
        'Shape': [207961],
        'Ethnic group': [41710],
        'Disease': [12136],
        'Food': [2095],
        'Clothing': [11460],
        'Sport': [349,31629,1781513,28829877],
        'Game': [11410,28114058,17638008],
        'Unit of measurement': [47574],
    }
    t0 = datetime.now()
    for k, v in hypernyms.items():
        for i in v:
            h = v[0][0] if type(v[0]) is tuple else v[0]
            print(k, h, i)
            res,retry = None,0
            while res is None and retry < 5:
                try:
                    if type(i) is tuple:
                        if len(i) == 3:
                            res = batch_sparql(h, i[0], i[1], i[2])
                        else:
                            res = batch_sparql(h, i[0], False)
                    else:
                        res = batch_sparql(h, i)
                except Exception as e:
                    retry+=1
                    print('Retry',retry,str(e))
        t1 = datetime.now()
        print(t1-t0)

def order_hyperitemss():
    hitems = {}
    with open('./sortitems.tsv', 'r', encoding='utf8') as f:
        for l in f:
            l = l.strip()
            if l:
                hypernym, hid, id, lc = l.split('\t')
                hitems[id] = (hypernym, hid, int(lc))
    with open('./sortitems1.tsv', 'w', encoding='utf8') as f:
        for k,v in sorted(hitems.items(), key=lambda i: (i[1][2],i[1][0],i[1][1],i[0]), reverse=True):
            f.write(f'{v[0]}\t{v[1]}\t{v[2]}\t{k}\n')

def open_sparql_item_links():
    with open('./sortitems1.tsv', 'r', encoding='utf8') as f:
        for l in f:
            qid=l.split('\t')[3]
            sparql="""SELECT DISTINCT ?item ?article
    WHERE {
    VALUES ?item { wd:Q"""+str(qid)+""" } 
    ?item  wikibase:sitelinks ?linkCount.
    ?article schema:about ?item .
    ?article schema:inLanguage "en" .
    ?article schema:isPartOf <https://en.wikipedia.org/> .
    SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
    FILTER (?linkCount >= 20)
    }"""
            headers = {'Accept':'application/json'}
            r = requests.get('https://query.wikidata.org/sparql?query='+sparql, headers=headers)
            res,retry = None,0
            while res is None and retry < 5:
                try:
                    res = r.json()
                    for b in res['results']['bindings']:
                        link = b['article']['value']
                        webbrowser.open(link, new=0, autoraise=True)
                        print(qid, link, sep='\t')
                except Exception as e:
                    retry+=1
                    print('Retry',retry,qid,str(e),sep='\t')
            time.sleep(0.8)



def find_potentially_missing_wikidata():
    wikidata = [432,5043,2736,9174,349,7163,8434,718,748,11042,289,1368,9268,9089,198,23393,8495,8486,6097,5372,10693,11639,8445,7590,9592,6636,847,8683,12143,8094,10943,2763,568,872,7755,11002,49389,658,8461,7366,11024,195,703,8070,9259,8142,23540,32112,9598,11756,8454,9158,34172,1734,8068,33741,35831,1889,5369,171,601401,37260,671,1108,23691,5375,12546,542,895,491,8081,5873,11764,466,9159,5377,9232,7553,40953,40231,34362,11409,5378,11761,36963,9350,10931,12684,12184,4006,9585,37038,16917,35127,1841,8465,11420,1968,9603,22679,36633,41662,6388,11413,35032,33057,8092,34956,13233,492,7291,812767,30849,7987,8396,37068,7281,263,11661,35856,11419,35269,60227,7307,37055,11651,83364,39809,418,8418,12187,9332,250,36244,40821,3966,483654,4439,9163,38035,93190,40244,11417,38926,40867,37853,7922,15326,36507,43483,46158,5503,36669,37707,41207,41466,44512,33881,36422,44602,4925193,7953,9453,12806,14373,36389,43812,5386,13317,61509,3930,81054,19557,35874,8188,8183,22649,12190,14083,133500,82821,34467,41323,43310,14208553,12681,149972,39689,43109,44311,234869,11453,79782,41425,43200,80131,34228,42486,5295,36908,543,29536,128758,4618,18216,47128,133182,81741,93200,43004,43450,53121,1035954,5294,108458,42967,11429,130949,47774,44595,385378,6649,173387,162297,83459,43183,23384,17422,12100,48362,44914,52946,4321,4290,7707,5916,12029,676899,131138,75809,81058,133492,192995,49845,1455,484692,66086,93288,9764,11411,79800,108429,40561,820655,3341285,79602,83462,169207,47783,13228,159992,132781,47280,2122,620629,1293,27827,127683,179700,101849,123006,39531,43024,43114,47050,4989906,18237,17888,18535,11015,159535,131656,79872,80793,165141,47433,872181,2857578,11692,131288,133004,134916,136851,42378,43521,33487,483110,161380,133067,81414,178561,93191,124164,57055,49776,620805,25670,18225,131265,160598,80042,132539,133792,166788,170566,171180,267245,1644573,338450,5318,182899,159354,161238,102416,155656,181138,726080,728455,45803,1622659,7020,7390,235858,131165,79791,178024,177378,175621,162827,82264,166776,170585,1501,7603,159241,131569,132325,177626,177764,81945,164666,178651,164089,166005,180684,105674,124100,200303,54237,339747,484083,174876,159385,80895,160826,165494,166376,167336,180910,38108,42283,20514253,487,8004,8398,131395,79798,83058,83922,187436,101935,167172,170539,187916,170519,122960,13479982,5293,483444,483889,178915,163140,179226,165970,179661,152247,103924,47770,259745,486296,483677,543842,483985,8795,76267,163214,134211,179723,194489,1647694,268208,940,28813,20350,483453,166502,104085,154136,170963,49703,58854,213449,11693,127060,129558,160603,183257,80998,134194,101313,189539,172025,171764,189746,126793,41679,1712140,856,127900,160710,131562,161157,162875,177923,184602,185217,180046,181930,974135,212564,7735,608,182740,173235,161500,177275,178512,178843,134556,135005,188907,181322,189198,721587,724351,193434,193605,3220391,7406919,6423963,4543,17460,484847,131303,159408,175331,178564,133948,101659,179742,165704,102532,186969,170737,181903,120931,189760,194387,62955,234213,3565868,1326354,483868,483978,182442,133201,178266,137073,164338,104444,179807,170980,149999,151900,33861,172014,188844,193475,219067,1299714,4308,226264,7718,32566,8401,480498,484830,131471,184211,131748,134052,178131,163770,179415,134658,186222,165580,186431,106612,170561,156223,182076,172175,41966,47217,205647,1744607,3270143,7419258,30314010,31207,483693,177051,132364,187668,187706,180507,103495,182154,191057,124734,192451,978,230386,159774,184940,133862,185027,178934,141180,170436,170285,180711,155930,189819,192786,206021,52943,3235597,3972943,592,309481,10857409,28089,33203,14088,159452,174512,183605,81166,81242,163547,178803,163534,184733,136822,187650,107617,114466,182338,169489,171401,189723,34044,206989,212166,216685,219517,30903,17955,245,175309,184651,178678,181784,188823,104499,192280,41583,50776,207441,205418,1027879,209496,216507,279532,264965,12623,79719,175111,161387,178048,178169,178108,186150,179687,179643,187449,102843,180187,170474,109411,188804,107342,180494,168210,181354,180935,169737,190512,192087,200481,46261,49377,49773,58199,61081,271534,223625,27914,552461,14132,183018,131359,161410,160738,131480,178401,179366,178122,185905,151980,179875,168414,170612,181190,172020,33937,172221,715625,191830,46805,201022,49376,58702,45594,207337,61465,9896,31728,13499,131160,172491,175145,172663,182863,183206,177716,178805,165194,185851,186619,140028,179965,180692,170327,180372,181008,188966,117850,171038,171990,191503,190122,203540,51597,212809,240126,6502154,12014035,13261,650711,15788,10926,174077,183731,178743,185467,152213,180720,181767,102877,155922,190978,202255,59774,6537379,1778821,219423,5892272,318296,223748,5849,8402,174989,183091,184452,185298,188504,180289,146863,189275,190132,191448,192425,193312,206049,323225,328703,308857,381045,16629185,26102,29485,31920,31427,22728,28549308,76560,183976,175173,104225,167987,181066,188213,170931,189570,191797,193210,193547,45584,201928,193893,46952,49749,6653802,4182287,273285,319771,223341,26473,8394,27477249,12743,12314,19408,66221,182878,182570,175315,185727,185749,133973,165596,187689,107706,142554,181417,146878,189221,171201,189183,191035,192909,192270,43022,751722,194100,48221,208607,975085,862765,241987,326827,327651,228986,230110,179132,185943,186190,152263,147651,188613,190539,124757,192521,779272,194253,193104,42767,40237,193777,200253,192892,209928,51593,987584,842333,234138,53094,212940,287198,273120,223266,4343,27911,11175,593675,182760,82245,183414,187715,188063,149757,104851,189594,190068,191406,189753,192089,192746,193036,200117,201965,201424,47988,210272,203415,212434,231978,2927074,2102979,269785,219239,365585,4503,662860,31687,22868,182933,183057,183308,184654,137097,165233,148636,187860,170417,188976,188485,180927,190763,191051,192914,193663,207621,204100,45045,245117,1436734,300920,219320,274493,7856,29358,31732,626510,76611,159595,130582,172809,183755,184266,185252,185092,179550,187204,188645,143912,153946,182274,154278,182072,189548,678522,190016,191355,192717,37041,193045,193411,771035,193944,202325,48537,43414,207125,210749,932214,211382,208704,231425,999259,209044,234904,241059,216781,217525,379693,348303,7212330,329547,383258,10282403,2349,466439,487343,17582,17946,571571,575092,4042967,80970,184719,83602,186243,186693,186506,106687,106500,181336,120200,720243,189977,193076,42195,192431,201884,202018,204128,204686,204933,209158,245177,263443,242256,243551,1795024,284742,334645,219407,1139,321053,407418,10283,477298,12695,66295,131375,183984,162528,184973,191618,191072,192664,192962,37137,193145,200656,54124,207714,203290,202875,203324,203478,59816,208413,60797,211011,232207,214151,1403016,214267,215168,244696,234870,213608,245341,3333484,7675376,220695,330963,465299,68676,185020,178034,186005,186165,188724,181693,189317,188267,189049,157188,189336,189656,191776,192623,193386,37159,693464,827654,194274,192833,192832,193237,40283,193842,207946,59677,202961,212112,208144,212737,205388,212805,213908,1773974,3595586,273353,1189047,13156052,371174,221284,337547,5367,456012,249,603773,645858,161936,184865,188506,186240,187776,154605,156351,181901,120443,189177,189825,193742,193654,192372,193217,192828,41075,209889,59157,210778,206494,208598,212607,208674,204606,1020115,51644,232932,235399,215194,209647,2483208,243688,2376488,3479346,270102,318529,13400960,383389,323466,223642,309252,12002092,422438,496696,496946,231200,490396,494348,33226,645917,185676,178990,187661,140588,153271,116213,119094,188951,189376,189472,189867,192532,193395,192149,193495,41349,744099,41521,202064,207184,207238,202301,205665,207591,210540,59544,202391,207703,203986,211578,204632,959962,213901,209041,214244,234538,211420,209588,263668,217327,3378593,272026,219554,17649781,18003128,326061,334156,8524,660567,184759,109144,182250,188228,157171,189447,194267,46388,815628,852100,207175,205734,47566,851824,206828,208120,208751,61391,231587,842284,213711,212936,261290,244150,2215841,322348,1268865,312021,379932,238306,389654,337935,624482,506630,6293,18531,572664,10962,184230,164761,187466,167191,150395,125421,190009,190825,698752,721667,191903,194270,193162,193770,194168,49390,207684,207650,210978,44854,204043,211509,51606,212108,208041,231455,214242,213541,842617,1049852,235169,245359,216526,217175,223335,223590,380616,221390,334911,391744,539067,625298,490513,60674974,22696,597473,622812,14658,15032,657246,674926,138796,188606,188494,147101,189396,189452,190706,191595,192847,826038,744038,201817,202298,207469,207174,205730,864113,202344,206008,849345,49809,208376,210999,842798,212926,244700,240532,243289,2830455,3354732,272683,369570,275596,5830907,1321250,15078788,220659,422442,338808,335414,427523,622512,468414,32090,7982,23790,473858,537151,622563,657449,158454,152416,188456,151070,189401,105611,33992,715746,720988,190084,693369,747779,194189,192420,193228,831663,815859,831454,849944,855680,54837,918385,208370,203609,62962,51404,211036,213843,208701,840829,213511,235041,209316,1463025,264364,280817,243264,242415,1747618,217972,334173,327223,326704,318394,327968,320575,223681,328716,332395,1215575,223776,1331926,237623,467064,467011,22857,11587,68854,176831,131543,83900,92438,152424,188818,34009,690768,124922,191012,747592,749593,744027,193170,846227,210761,207965,210970,206763,203443,858049,208341,63724,61065,212845,211402,213403,215641,215184,209642,258331,1096878,215862,1104185,216613,216048,2043282,1131732,6451172,1132131,1133485,334526,376934,272175,348958,275456,1192063,320011,223371,407752,376693,14623204,407431,223710,410412,238255,5275,27406,622550,97154240,487365,626608,476968,27207017,647500,14092,654476,654493,161837,188790,33951,188635,193387,826629,757329,816321,746471,817281,835884,205908,207788,840387,212105,839512,954845,843227,231632,949149,214536,215495,215118,245249,1127209,262533,216033,2866472,264327,242797,1139546,6662173,1147152,217127,301934,20026619,221696,20437094,12888920,399999,328720,3609,380141,312226,8798578,516739,423169,504400,26553,26398,624902,32880,507417,535695,606060,73984,181022,110223,33970,701069,692209,192937,736311,41923,830036,830043,40745,198504,201252,207819,871232,848867,847731,931309,211171,876776,208679,214255,213369,235007,215259,262244,245122,241670,259642,242125,282772,271021,244475,271277,217108,267753,6957341,7970362,397334,273404,319218,3705105,320021,319565,221409,332637,220989,1221208,386272,381885,223714,10880526,238199,230360,422482,236014,236006,26303,622527,623703,471753,466977,478958,29055131,641226,640448,162351,166332,189507,116890,697327,715858,192674,694190,38978,732722,734271,49371,207697,845734,211773,49830,841774,45774,208133,213796,904889,51647,1068640,215677,912820,216169,1444790,209764,1651597,2571972,250843,306135,1149626,378210,218010,4004659,273972,327742,370330,306264,1324153,324634,221635,333009,1255828,380679,318094,410400,1358919,339249,502163,422652,29221,438946,662862,506424,22314,472827,526046,622825,622954,157833,159421,75673,148836,34032,191307,827658,192899,738826,750080,826059,753883,193311,837185,822331,855373,210439,847618,212903,51611,214152,205644,995600,1074275,842392,1403377,1022922,244783,1127759,1480864,911437,258450,267416,216933,242791,243570,1753200,6821213,334516,363057,273088,1165905,274076,274083,13043846,223166,14085739,1208425,407212,221552,4303,4348,317623,334661,334695,335016,223871,392409,422449,465014,622521,623772,28564,1541043,537769,431672,459459,8010,626503,468427,511009,520181,623045,622676,615699,653848,665141,675754,716774,690148,726826,723685,730573,732404,734649,200800,815241,814696,819264,837313,865455,850794,49748,850292,206924,208202,208398,877517,204255,967853,211391,962135,878156,902378,909459,1001079,1412403,2914621,216952,248534,6665312,281287,286300,7128792,304618,273140,326163,334477,326717,335661,3505252,1161133,275115,371199,1210094,324617,1225041,410358,4492,621076,503021,460679,1546421,85173778,87775025,663016,506259,475746,476078,478174,568742,603399,600571,622653,18957,675824,76574,130543,178562,707125,734231,741118,748309,757232,740728,827135,828185,753132,834280,833734,835709,824529,205754,849730,210035,875521,840392,847705,858893,839500,877358,211155,841983,861699,841267,51632,1405524,898830,1046284,1085001,944584,1124595,912179,1988216,916412,216690,252000,252187,254569,271611,304330,273125,1148747,271603,1154336,4117409,272460,3832870,352842,355409,12772819,1164348,372949,1323528,329823,3972,331911,409231,310669,463522,620737,465279,339180,624161,461528,29483,463223,623272,492202,625369,626268,505821,506059,468495,22702,517760,550182,548787,582093,573565,595448,603742,606662,608259,646988,604408,670131,654810,130003,73603,159505,182639,176953,83261,180817,113603,121742,170028,742385,693827,736748,773944,752783,815740,828450,865144,837171,853710,844421,210854,922203,847493,949256,212912,954202,841984,844244,240709,1996993,2040849,216158,248726,249114,2615451,252583,251695,275603,217170,6682302,2252077,1146120,1777301,271868,1755746,6501095,335638,4201895,379788,1258217,5928045,381364,1231764,332019,334734,463515,421214,1324355,10701282,337474,237232,335081,1516555,338071,29778,490600,10145,22666,635366,473719,476118,25481968,554482,582687,593744,608152,647110,619751,647559,654057,657438,641845,654641,669262,677640,159377,161147,139347,146071,181711,118382,34168,679847,691875,692003,728265,737148,742736,192047,743988,784235,831575,830528,201872,754941,850130,854807,839496,917824,873501,921099,877661,856681,213934,1021580,215579,1062839,1422746,1121558,259516,253333,216860,263864,2306047,217249,2471422,326124,272165,396338,318702,320599,274758,1197111,368475,275079,4990531,321259,322943,221438,329285,408284,376596,408535,1242466,309179,17572748,228502,382984,334723,411417,390557,11190742,512410,499192,500050,463543,651669,622508,29653,466749,471835,471880,18599,18919,549121,623184,564606,614278,617075,655150,640990,658334,667692,668349,66241,161222,139200,141293,111155,156894,156975,691771,734206,725991,731112,728502,749457,738680,764675,750291,757388,787497,45356,831735,829348,830331,46241,755125,833304,849302,846901,816829,868200,847079,837330,835956,870895,927079,867775,925667,922480,929080,931092,51406,51600,943526,861974,959583,840625,205572,898375,938957,212960,215599,1422874,1061047,1427096,240500,1076874,239463,2612896,1131696,2751419,247506,265623,266680,2324820,1137326,3240539,281347,3172759,270309,271008,284865,273047,335644,302037,273309,272629,7476695,301011,1189816,4612907,4846249,8348417,13221624,323287,324254,220919,221096,17489160,384840,412318,1570005,386498,511056,10836209,4482,1353040,503354,426921,487654,26392,463495,625145,466952,22763,510666,477249,478195,549793,520611,576618,585184,578794,599170,599510,650702,654660,654787,678305,126888,164668,186020,139195,181266,182103,690098,725864,191691,695430,740909,756079,747894,756827,748845,775805,825762,750463,756820,780067,752138,745783,745933,744762,744980,754479,752673,746694,195462,829895,198721,828879,834459,864737,854248,854623,822206,836165,836655,866427,925958,924146,848771,932791,840171,953291,878123,895060,1409625,1368380,1066914,1415049,1053501,1061108,1031246,1094729,915196,1434550,1956672,2514663,239206,241760,1899269,258344,1674502,252321,267114,279829,250429,1133673,2119376,3006091,1643989,1827102,1153191,295472,1148077,327349,357404,19501023,327401,219954,371008,373152,373478,5057302,5505949,1319035,330033,325668,331828,1231428,408649,1254596,10298203,410346,394084,422631,504033,421713,337987,487973,652116,488036,428887,29462,467033,506701,507127,505643,474334,477544,478654,550675,572590,518020,575890,527425,527449,594939,622588,610098,10925,18936,644628,658145,654705,677073,163942,142804,180853,678615,679367,721858,722218,685884,721747,721129,724950,725975,730298,827792,740787,830193,815839,46839,833938,852337,834934,853589,854022,917206,49908,926217,839578,62141,966327,860447,968554,841285,934309,934663,935773,234162,842375,1412313,1423103,1418502,899599,1415790,1043043,1071447,1072306,1029421,911397,245927,1840469,1128324,1121851,262109,1123156,1077350,1973996,910267,1923231,1436963,278846,2014687,216749,1130378,2094204,248903,1648514,2914650,251777,250796,1135885,284288,242761,1132113,1777138,1147190,291240,3392263,218998,1155561,319997,274480,12343832,320433,369961,1164462,410237,1225396,409192,333914,386001,417571,1332286,337553,24488,24637,25495,502918,427013,1527023,624028,9436,624232,663529,493477,631425,632959,510866,637156,541394,20723970,543901,523231,589481,622993,653953,657196,19423,654670,160683,161830,163887,150008,708232,725531,724473,38935,39111,739929,740253,728547,755706,749085,747499,740326,757410,766875,743418,827198,800177,751439,752329,831869,797108,754886,832003,849734,852544,853547,917194,835992,838498,874985,866449,866623,839647,840326,859398,862207,49775,895471,1381652,898344,989930,1075838,212930,1416244,1054276,1044835,1045782,1048465,948732,910277,1126556,1048525,1123037,1866347,1899048,1455316,1976715,1985804,1482612,1742659,255819,277503,2552748,3030248,1756474,1632385,283534,281914,3177899,1140464,1142459,1145265,285335,3574961,1151752,295865,3386847,7421486,3606845,274474,8011595,1194492,328964,13389820,1199173,1314426,15604660,410291,220528,414028,335591,10281355,386764,420778,1346045,1349214,421700,620951,1362405,500094,619801,1538947,426337,423888,624587,58819597,453122,506687,628007,633454,635687,578601,578726,12797,670258,668732,161386,186117,83809,164777,184949,138208,141212,152733,152869,695677,35232,190327,681263,689044,718858,190885,725920,192360,728904,738622,736922,743569,825501,740768,756202,782762,791974,751424,752021,744373,752823,752660,830494,830115,834826,844993,845073,845712,849796,43336,53744,865422,845888,849417,838083,56898,865909,875948,918094,866816,210403,847201,62903,848376,927277,203638,840304,862579,940319,877353,841470,886459,890886,841184,876737,841088,1379266,898144,995616,936055,903165,1054726,1050260,1056617,258127,258137,246681,1048478,1048568,1425378,1081491,910154,1472221,1479257,1049098,1456974,1128406,1128437,2789594,275787,3033223,3051553,1136816,2128768,2964004,1758647,1763090,283180,1139892,2471790,3285658,326100,1148563,379085,328293,17590603,1154909,319899,3621307,1196727,373557,1192097,1163256,328970,326092,330153,1282870,410061,1284645,333282,15580856,1255251,417633,411635,409761,411229,413728,415908,1256511,231419,1340459,422229,1354480,335185,498267,498661,1522225,424976,60297962,453181,506749,664166,629029,535116,18601,18643,18776,579418,579500,558376,598443,598540,13497,18965, ]
    dbrecords = set()
    sqlstr = f"""
    SELECT id FROM wiki.item
    WHERE id IN ({','.join(str(x) for x in wikidata)})
    """
    cursor = conn.cursor()
    result = cursor.execute(sqlstr)
    for row in result:
        dbrecords.add(row[0])
    for w in wikidata:
        if w not in dbrecords:
            print(w)

def delete_by_en_title(en_title):
    sqlq = f"SELECT item FROM wiki.article WHERE language='en' AND title=N'{en_title}'"
    cursor = conn.cursor()
    res = []
    for row in cursor.execute(sqlq):
        res.append(row)
    if len(res) == 0:
        print('Cannot find:', en_title)
        return
    item = res[0][0]
    sqld = f"DELETE FROM wiki.article WHERE item = {item}"
    cursor.execute(sqld)
    cursor.commit()
    sqld = f"DELETE FROM wiki.item WHERE id = {item}"
    cursor.execute(sqld)
    cursor.commit()
    print('deleted', item, en_title)

def delete_by_wikidata_id(item):
    cursor = conn.cursor()
    sqld = f"DELETE FROM wiki.article WHERE item = {item}"
    cursor.execute(sqld)
    cursor.commit()
    sqld = f"DELETE FROM wiki.item WHERE id = {item}"
    cursor.execute(sqld)
    cursor.commit()
    print('deleted', item)


tbdws = [
'QRIO',
'AD 39',
'3GPP',
'Dattatreya',
'.32 ACP',
'Fan Li',
'History of County Wexford',
'Desertas Islands',
'Erie Canal',
'Bayan I',
]

for c in tbdws:
    delete_by_en_title(c)
    

if __name__ == '__main__':
    # build_hypernym_grid()
    # order_hyperitemss()
    # open_sparql_item_links()
    insert_by_titles()
    # batch_sparql(514,66394244)
    conn.close()
